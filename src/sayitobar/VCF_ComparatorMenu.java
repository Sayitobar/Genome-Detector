/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sayitobar;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mac
 */
public class VCF_ComparatorMenu extends javax.swing.JFrame {

    /**
     * Creates new form ComparatorMenu
     */
    public VCF_ComparatorMenu() {
        initComponents();
        
        // Set outputFile location and outputLoc
        outPathLoc.setText(System.getProperty("user.home") + "/Desktop");
        outFileName.setText("OUT_" + new java.text.SimpleDateFormat("yyMMdd-hhmm").format(new java.util.Date()) + ".xlsx");
        
        // Window location
        setLocation(GenomeDetector.WinX - getWidth()/2, GenomeDetector.WinY - getHeight()/2);
        
        // ProgressBar setup
        GenomeDetector.progressBar = progressBar_VCF;
        progressBar_VCF.setVisible(false);
        
        // set splitters
        splitElementsTxtfld.setText(XLSX_Comparator.splitters.replace("|", " ").trim());
        outDiffCheckbox.setSelected(false);
    }
    
    public void close() {
        WindowEvent closeWin = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWin);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        infoButton = new javax.swing.JButton();
        compareButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        selectOutputPathButton = new javax.swing.JButton();
        outPathLabel = new javax.swing.JLabel();
        outFileName = new javax.swing.JTextField();
        outFileLabel = new javax.swing.JLabel();
        outPathLoc = new javax.swing.JTextField();
        addFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pathsTable = new javax.swing.JTable();
        splitCheckbox = new javax.swing.JCheckBox();
        splitElementsTxtfld = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        outDiffCheckbox = new javax.swing.JCheckBox();
        devButton = new javax.swing.JButton();
        progressBar_VCF = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        backButton.setIcon(javax.swing.UIManager.getIcon("FileChooser.homeFolderIcon"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        Title.setFont(new java.awt.Font("Futura", 0, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("VCF Comparator");

        infoButton.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        javax.swing.Icon icon = javax.swing.UIManager.getIcon("OptionPane.informationIcon");
        java.awt.image.BufferedImage bufferedImage = new java.awt.image.BufferedImage(icon.getIconWidth(), icon.getIconHeight(), java.awt.image.BufferedImage.TYPE_INT_ARGB);
        java.awt.Graphics2D g_ = bufferedImage.createGraphics();
        icon.paintIcon(null, g_, 0, 0);
        g_.dispose();
        javax.swing.Icon icon_ = new javax.swing.ImageIcon(bufferedImage.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH));
        infoButton.setIcon(icon_);
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        compareButton.setText("Compare");
        compareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareButtonActionPerformed(evt);
            }
        });

        selectOutputPathButton.setIcon(javax.swing.UIManager.getIcon("FileChooser.directoryIcon"));
        selectOutputPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectOutputPathButtonActionPerformed(evt);
            }
        });

        outPathLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        outPathLabel.setText("Output folder:");

        outFileName.setToolTipText("");
        outFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outFileNameActionPerformed(evt);
            }
        });

        outFileLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        outFileLabel.setText("Output file name:");

        outPathLoc.setEditable(false);
        outPathLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outPathLocActionPerformed(evt);
            }
        });

        addFileButton.setText("Add file");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        pathsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File paths", "FCHR", "ACHR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        pathsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(pathsTable);
        if (pathsTable.getColumnModel().getColumnCount() > 0) {
            pathsTable.getColumnModel().getColumn(0).setResizable(false);
            pathsTable.getColumnModel().getColumn(0).setPreferredWidth(400);
            pathsTable.getColumnModel().getColumn(1).setResizable(false);
            pathsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        splitCheckbox.setText("Split cell text with");
        splitCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitCheckboxActionPerformed(evt);
            }
        });

        splitElementsTxtfld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitElementsTxtfldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 2, 10)); // NOI18N
        jLabel1.setText("(space between every splitter) ");

        outDiffCheckbox.setText("Output the differences (instead of commonities)");
        outDiffCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDiffCheckboxActionPerformed(evt);
            }
        });

        devButton.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        devButton.setIcon(javax.swing.UIManager.getIcon("FileView.hardDriveIcon")
        );
        devButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devButtonActionPerformed(evt);
            }
        });

        progressBar_VCF.setValue(50);
        progressBar_VCF.setBorderPainted(false);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(210, 210, 210)
                        .addComponent(devButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(compareButton))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(splitCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(splitElementsTxtfld, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))
                                    .addComponent(outDiffCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(outFileLabel)
                                    .addComponent(outPathLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(outFileName)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(outPathLoc)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectOutputPathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(32, 32, 32)))
                .addContainerGap())
            .addComponent(progressBar_VCF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addComponent(Title)
                    .addComponent(infoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(devButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(splitElementsTxtfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(splitCheckbox)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outDiffCheckbox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectOutputPathButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outPathLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(outPathLabel)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outFileLabel))
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compareButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar_VCF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // go to home screen
        System.out.println("Back to home menu");

        GenomeDetector.WinX = getX() + getWidth() /2;
        GenomeDetector.WinY = getY() + getHeight()/2;

        close();
        MainMenu.wakeup();
    }//GEN-LAST:event_backButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        System.out.println("Opening info window");

        GenomeDetector.WinX = getX() + getWidth() /2;
        GenomeDetector.WinY = getY() + getHeight()/2;

        close();
        infoWindow.wakeup(infoWindow.Messages.VCF_COMPARATOR);
    }//GEN-LAST:event_infoButtonActionPerformed

    private void selectOutputPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectOutputPathButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop/"));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Select output folder");

        int response = fileChooser.showDialog(this, "Select");

        if (response == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            outPathLoc.setText(filePath);
        }
    }//GEN-LAST:event_selectOutputPathButtonActionPerformed

    private void outFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outFileNameActionPerformed

    private void outPathLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outPathLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outPathLocActionPerformed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop/"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Variant Call Format (VCF File)", "vcf"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Select one of your VCF files");

        int response = fileChooser.showDialog(this, "Select");
        
        if (response == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            
            // Check if selected file was selected before (if so, return)
            for (int i=0; i < pathsTable.getModel().getRowCount(); i++)
                if (pathsTable.getModel().getValueAt(i, 0).toString().contains(filePath))
                    return;
            
            // else: add filePath to table
            ((javax.swing.table.DefaultTableModel) pathsTable.getModel()).addRow(new Object[]{filePath, "CHROM", "POS"});  // Default search values
        }
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void compareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareButtonActionPerformed
        class OneShotTask implements Runnable {
            VCF_ComparatorMenu frame;
            OneShotTask(VCF_ComparatorMenu frame) { this.frame = frame; }   // I needed to create a class implementing Runnable
                public void run() {                                         // to pass this (XLSX_ComparatorMenu) as parameter
                    compare(frame);                                         // in order to pop-up window alerts to work.
                }
        }
        GenomeDetector.t = new Thread(new OneShotTask(this));
        GenomeDetector.t.start();
        GenomeDetector.running = true;
    }//GEN-LAST:event_compareButtonActionPerformed
    private void compare(VCF_ComparatorMenu frame) {
        if (pathsTable.getModel().getRowCount() < 2 || "".equals(outFileName.getText()) || "".equals(outPathLoc.getText())) {
            // if any places empty OR only 1 file given, do not run it.
            return;
        }
        
        // Prerequisites
        String[] paths           = new String[pathsTable.getModel().getRowCount()];
        String[] ROWID_firstCell = new String[pathsTable.getModel().getRowCount()];
        String[] ROWID_aimedCell   = new String[pathsTable.getModel().getRowCount()];
        
        for (int i=0; i < pathsTable.getModel().getRowCount(); i++) {
            paths[i]           = pathsTable.getModel().getValueAt(i, 0).toString();
            ROWID_firstCell[i] = pathsTable.getModel().getValueAt(i, 1).toString();
            ROWID_aimedCell[i] = pathsTable.getModel().getValueAt(i, 2).toString();
        }
        VCF_Comparator.ROWID_firstCell = ROWID_firstCell;
        VCF_Comparator.ROWID_aimedCell = ROWID_aimedCell;
        XLSX_Comparator.isSplitChecked = splitCheckbox.isSelected();
        XLSX_Comparator.isOutputDiffs  = outDiffCheckbox.isSelected();
        
        String tempSplitters           = XLSX_Comparator.splitters;
        String splitters               = splitElementsTxtfld.getText();
        for (int i=0; i < "\\.[]{}()<>*+-=!?^$|".length(); i++)  // add \\ in front of special characters
            splitters = splitters.replace(String.valueOf("\\.[]{}()<>*+-=!?^$|".charAt(i)), "\\\\" + String.valueOf("\\.[]{}()<>*+-=!?^$|".charAt(i)));
        XLSX_Comparator.splitters = splitters.replace(" ", "|");
        
        
        try {
            long startTime = System.nanoTime();
            
            setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            progressBar_VCF.setValue(0);
            progressBar_VCF.setVisible(true);
            

            VCF_Comparator.start(
                    paths,
                    outPathLoc.getText(),
                    "/" + outFileName.getText()
            );
            
            
            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            progressBar_VCF.setVisible(false);
            System.out.println("\n\nTotal creation time: " + (System.nanoTime()-startTime)/1000000000.0 + " secs");
            javax.swing.JOptionPane.showMessageDialog(frame, "File successfully generated:\n" + outPathLoc.getText() + "/" + outFileName.getText() + "\n(in " + (double)Math.round((System.nanoTime()-startTime)/1000000000.0 * 100d) / 100d + " secs)", "Success", 1);

        } catch (Exception e) {  // IOException doesn't work here, trust me
            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            progressBar_VCF.setVisible(false);
            XLSX_Comparator.splitters = tempSplitters;  // sorun çıkarsa eski haline getir (Gereksiz "//" koymayı engelliyor)
            
            System.out.println("Couldn't start VCF_Comparator.start() (line " + e.getStackTrace()[0].getLineNumber() + "): " + e);
            e.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(frame, "Search failed (VCF Comparator)\n\nClick (i) button on the right corner of the screen to see the rules\nof input VCF files. Please check the formatting and try again.\n\n\nDebug:\n" + e, "Search failed", 2);
        }
        GenomeDetector.running = false;
    }  

    private void splitCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splitCheckboxActionPerformed

    private void splitElementsTxtfldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitElementsTxtfldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splitElementsTxtfldActionPerformed

    private void outDiffCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDiffCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outDiffCheckboxActionPerformed

    private void devButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devButtonActionPerformed
        System.out.println("Opening DEV CONSOLE");

        Thread t = new Thread() {
            @Override
            public void run() {
                devConsole.wakeup();
            }
        };
        t.start();
    }//GEN-LAST:event_devButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (GenomeDetector.running) {
            System.out.println("Cancel: interrupt signal given");
            GenomeDetector.t.stop();
            GenomeDetector.running = false;
            
            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            GenomeDetector.progressBar.setVisible(false);
            XLSX_Comparator.splitters = XLSX_Comparator.splitters.replace("|", " ").replace("\\", "");
            
            // If cancelled during creation of a new excel file, delete that as it is corrupted and not in the wanted format
            try {
                Files.deleteIfExists(Paths.get(outPathLoc.getText() + "/" + outFileName.getText()));
            } catch (IOException ex) {}
            
            javax.swing.JOptionPane.showMessageDialog(this, "Comparison cancelled\n\nNote: Try to use the cancel button sparingly.\nIt may crash the software.", "Cancelled", 2);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selection = pathsTable.getSelectedRow();

        if (selection > -1)  // as long as a row is selected, remove it
            ((javax.swing.table.DefaultTableModel) pathsTable.getModel()).removeRow(selection);
    }//GEN-LAST:event_removeButtonActionPerformed

    public static void wakeup() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(infoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VCF_ComparatorMenu().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton compareButton;
    private javax.swing.JButton devButton;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox outDiffCheckbox;
    private javax.swing.JLabel outFileLabel;
    private javax.swing.JTextField outFileName;
    private javax.swing.JLabel outPathLabel;
    private javax.swing.JTextField outPathLoc;
    private javax.swing.JTable pathsTable;
    private javax.swing.JProgressBar progressBar_VCF;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton selectOutputPathButton;
    private javax.swing.JCheckBox splitCheckbox;
    private javax.swing.JTextField splitElementsTxtfld;
    // End of variables declaration//GEN-END:variables
}
